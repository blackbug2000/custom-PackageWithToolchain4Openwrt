# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
        - 'main'
    paths:
        - 'xiaorouji/luci-app-passwall/Makefile'

  env:
    TZ: Asia/Shanghai
    passwall: xiaorouji/luci-app-passwall
    packages: xiaorouji/openwrt-passwall-packages
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Check target repository latest version
  job_check_version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      passwall_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
    
    steps:
        - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: 'main'

        - name: Check version
          id: check_version
          env:
            url_release: https://api.github.com/repos/${{ env.passwall }}/releases/latest
        run: |
          cd luci-app-passwall
          latest_version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' Makefile | sed ':a;N;s/\n$//;s/\n/-/;ba')
          latest_release=$(wget -qO- -t1 -T2 ${{env.url_release}} | awk -F '"' '/tag_name/{print $4}')
          has_update=$([ "${latest_version}" != "${latest_release}" ] && echo true || echo false)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "latest_release: ${latest_release}"
          echo "has_update: ${has_update}"
        
        - name: Prepare release
        run: |
          echo "## :mega:Update content" >> release.txt
          echo "![](https://img.shields.io/github/downloads/${{ env.passwall }}/${{steps.check_version.outputs.latest_version}}/total?style=flat-square)" >> release.txt
          echo "### Passwall Info" >> release.txt
          echo "**:minidisc: Passwall Version: ${{steps.check_version.outputs.latest_version}}**" >> release.txt
          touch release.txt

      - name: Generate new tag & release
        #if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.check_version.outputs.latest_version}}
          body_path: release.txt
  
